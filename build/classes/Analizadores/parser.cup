// CUP specification for a simple expression evaluator (no actions)
package Analizadores;
import java_cup.runtime.*;
import ER.ExpresionesRegulares;
import Errores.ReporteErrores;

/* Preliminaries to set up and use the scanner.  */
parser code {:
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){
        ReporteErrores.crear("Sintáctico", "No se esperaba este componente: " +s.value, (s.left), s.right); 
        String errSin = "Error Sintáctico en la Línea " + (s.left) + " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".";
        System.out.println(errSin); 
    } 
    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        ReporteErrores.crear("Sintáctico", "Error irrecuperable, componente \"" +s.value + "\" no reconocido", (s.left), s.right); 
        String errSin = "Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.";
        System.out.println(errSin); 
    }  
:} 
/* Terminals (tokens returned by the scanner). */
terminal    String        LLAVE_ABRE, SEPARADOR, LLAVE_CIERRA, CONJ, DOS_PUNTOS, IDENTIFICADOR;
terminal    String        ASIGNACION, PUNTO_COMA, LETRA_MAYUS, LETRA_MINUS, DIGITO, CONJ_ASCII;
terminal    String        COMA, CONJUNTO, COMILLA_DOBLE, COMILLA_SIMPLE, CONCATENACION;
terminal    String        ALTERNANCIA, CERRADURA_KLENEE, CERRADURA_POSITIVA, OPCIONAL;
terminal    String        SALTO, ENTRADA, MENOS;
/* Non terminals */
non terminal String        inicio, item, item_ascii, notaciones, entre; 
non terminal String        definiciones, entradas,conjuntos,expresion;
non terminal String        simple, compuesta, notacion, familias;

/* Precedences */
precedence left CERRADURA_KLENEE, CERRADURA_POSITIVA, OPCIONAL;
precedence right CONCATENACION, ALTERNANCIA;

start with inicio; 
/* The grammar */
inicio ::= LLAVE_ABRE definiciones SEPARADOR SEPARADOR entradas LLAVE_CIERRA;

definiciones ::= 
    definiciones conjuntos 
    | conjuntos                       
    | definiciones expresion 
    | expresion
    ;

conjuntos ::= CONJ DOS_PUNTOS IDENTIFICADOR:c  {:RESULT= c; ExpresionesRegulares.agregarConjunto(RESULT);:} MENOS ASIGNACION familias PUNTO_COMA;
familias ::= simple | compuesta;

simple ::= simple COMA item
    | item ;

item_ascii ::= CONJ_ASCII:a {:RESULT= a;:}
    | COMILLA_DOBLE:a {:RESULT= a;:} 
    | COMILLA_SIMPLE:a {:RESULT= a;:}
    | LLAVE_ABRE:a {:RESULT= a;:}
    | LLAVE_CIERRA:a {:RESULT= a;:}
    | CERRADURA_POSITIVA:a {:RESULT= a;:}
    | PUNTO_COMA:a {:RESULT= a;:}
    | CONCATENACION:a {:RESULT= a;:}
    | CERRADURA_KLENEE:a {:RESULT= a;:}
    | ALTERNANCIA:a {:RESULT= a;:}
    | OPCIONAL:a {:RESULT= a;:}
    | DOS_PUNTOS:a {:RESULT= a;:}
    | ASIGNACION:a {:RESULT= a;:}
    | COMA:a {:RESULT= a;:}
    | MENOS:a {:RESULT= a;:}
    ;

item ::= 
    LETRA_MAYUS:a {:RESULT= a; ExpresionesRegulares.agregarLexemaConjunto(RESULT);:}
    | LETRA_MINUS:a {:RESULT= a; ExpresionesRegulares.agregarLexemaConjunto(RESULT);:}
    | DIGITO:a {:RESULT= a; ExpresionesRegulares.agregarLexemaConjunto(RESULT);:}
    | item_ascii:a {:RESULT= a; ExpresionesRegulares.agregarLexemaConjunto(RESULT);:}
    ;



compuesta ::= LETRA_MAYUS:a CONJUNTO LETRA_MAYUS:b {:ExpresionesRegulares.agregarAscii(a,b);:}
    | LETRA_MINUS:a CONJUNTO LETRA_MINUS:b {:ExpresionesRegulares.agregarAscii(a,b);:}
    | DIGITO:a CONJUNTO DIGITO:b {:ExpresionesRegulares.agregarAscii(a,b);:}
    | item_ascii:a CONJUNTO item_ascii:b {:ExpresionesRegulares.agregarAsciiEspecial(a,b);:}
;


notaciones ::=  CONCATENACION:a {:RESULT= a; ExpresionesRegulares.agregarLexema(RESULT);:} notacion notacion 
    | ALTERNANCIA:a {:RESULT= a; ExpresionesRegulares.agregarLexema(RESULT);:}notacion notacion 
    | CERRADURA_KLENEE:a {:RESULT= a; ExpresionesRegulares.agregarLexema(RESULT);:}  notacion 
    | CERRADURA_POSITIVA:a {:RESULT= a; ExpresionesRegulares.agregarLexema(RESULT);:} notacion 
    | OPCIONAL:a {:RESULT= a; ExpresionesRegulares.agregarLexema(RESULT);:} notacion
    ;
expresion ::= IDENTIFICADOR:c {:RESULT= c; ExpresionesRegulares.agregarExpresion(RESULT);:} MENOS ASIGNACION notaciones PUNTO_COMA;

notacion ::= CONCATENACION:a {:RESULT= a; ExpresionesRegulares.agregarLexema(RESULT);:} notacion notacion;
notacion ::= ALTERNANCIA:a {:RESULT= a; ExpresionesRegulares.agregarLexema(RESULT);:} notacion notacion;
notacion ::= CERRADURA_KLENEE:a {:RESULT= a; ExpresionesRegulares.agregarLexema(RESULT);:} notacion;
notacion ::= CERRADURA_POSITIVA:a {:RESULT= a; ExpresionesRegulares.agregarLexema(RESULT);:} notacion;
notacion ::= OPCIONAL:a {:RESULT= a; ExpresionesRegulares.agregarLexema(RESULT);:} notacion;
notacion ::= 
    LLAVE_ABRE IDENTIFICADOR:a {:RESULT= a; ExpresionesRegulares.agregarLexema(RESULT);ExpresionesRegulares.sumarAlUltimo();:} LLAVE_CIERRA 
    | SALTO:a {:RESULT= a; ExpresionesRegulares.agregarLexema(RESULT);ExpresionesRegulares.sumarAlUltimo();:} 
    | COMILLA_DOBLE:a {:RESULT= a; ExpresionesRegulares.agregarLexema(RESULT);ExpresionesRegulares.sumarAlUltimo();:} 
    | COMILLA_SIMPLE:a {:RESULT= a; ExpresionesRegulares.agregarLexema(RESULT);ExpresionesRegulares.sumarAlUltimo();:} 
    | ENTRADA:a {:RESULT= a; ExpresionesRegulares.agregarLexema(RESULT);ExpresionesRegulares.sumarAlUltimo();:}
    ;

entradas ::= entradas entre | entre;

entre ::= IDENTIFICADOR:i DOS_PUNTOS ENTRADA:e PUNTO_COMA {:ExpresionesRegulares.agregarEntrada(i,e);:};
